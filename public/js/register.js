"use strict";
var register = {};
register.model = {
  teamOne: m.prop(''),
  teamTwo: m.prop(''),
  teamOneScore: m.prop(''),
  teamTwoScore: m.prop('')
};
register.controller = (function() {
  var update = (function(e) {
    e.preventDefault();
    var data = {
      teams: [register.model.teamOne(), register.model.teamTwo()],
      score: [register.model.teamOneScore(), register.model.teamTwoScore()]
    };
    m.request({
      method: 'POST',
      url: 'http://localhost:8001/api/register',
      data: data
    }).then((function() {
      console.log('got a response');
    }));
  });
  return {update: update};
});
register.view = (function(ctrl) {
  return [m('h1', {class: 'heading1'}, 'Register result'), m('form', [m('input', {
    value: register.model.teamOne(),
    onchange: m.withAttr('value', register.model.teamOne),
    class: 'inputTeamName',
    placeholder: 'Team One'
  }), m('h2', {class: ['heading2__lessVSpace']}, 'vs.'), m('input', {
    value: register.model.teamTwo(),
    onchange: m.withAttr('value', register.model.teamTwo),
    class: 'inputTeamName',
    placeholder: 'Team Two'
  }), m('div', {class: 'teamScore-container'}, [m('h2', {class: 'heading2__lessVSpace'}, 'Result'), m('input', {
    value: register.model.teamOneScore(),
    onchange: m.withAttr('value', register.model.teamOneScore),
    class: 'teamScore',
    placeholder: 'Team One'
  }), m('div', {class: 'teamScore-divider'}), m('input', {
    value: register.model.teamTwoScore(),
    onchange: m.withAttr('value', register.model.teamTwoScore),
    class: 'teamScore',
    placeholder: 'Team Two'
  }), m('button', {
    class: 'submitButton-register',
    onclick: ctrl.update
  }, 'Register')])])];
});
m.module(document.getElementById('app'), register);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VzIjpbInJlZ2lzdGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsQUFBSSxFQUFBLENBQUEsUUFBTyxFQUFJLEdBQUMsQ0FBQztBQUVqQixPQUFPLE1BQU0sRUFBSTtBQUNiLFFBQU0sQ0FBRyxDQUFBLENBQUEsS0FBSyxBQUFDLENBQUMsRUFBQyxDQUFDO0FBQ2xCLFFBQU0sQ0FBRyxDQUFBLENBQUEsS0FBSyxBQUFDLENBQUMsRUFBQyxDQUFDO0FBQ2xCLGFBQVcsQ0FBRyxDQUFBLENBQUEsS0FBSyxBQUFDLENBQUMsRUFBQyxDQUFDO0FBQ3ZCLGFBQVcsQ0FBRyxDQUFBLENBQUEsS0FBSyxBQUFDLENBQUMsRUFBQyxDQUFDO0FBQUEsQUFDM0IsQ0FBQTtBQUVBLE9BQU8sV0FBVyxJQUFJLFNBQUEsQUFBQztBQUNyQixBQUFJLElBQUEsQ0FBQSxNQUFLLElBQUksU0FBQyxDQUFBO0FBQ1osSUFBQSxlQUFlLEFBQUMsRUFBQyxDQUFDO0FBQ2xCLEFBQUksTUFBQSxDQUFBLElBQUcsRUFBSTtBQUNULFVBQUksQ0FBRyxFQUFDLFFBQU8sTUFBTSxRQUFRLEFBQUMsRUFBQyxDQUFHLENBQUEsUUFBTyxNQUFNLFFBQVEsQUFBQyxFQUFDLENBQUM7QUFDMUQsVUFBSSxDQUFHLEVBQUMsUUFBTyxNQUFNLGFBQWEsQUFBQyxFQUFDLENBQUcsQ0FBQSxRQUFPLE1BQU0sYUFBYSxBQUFDLEVBQUMsQ0FBQztBQUFBLElBQ3RFLENBQUE7QUFDQSxJQUFBLFFBQVEsQUFBQyxDQUFDO0FBQUUsV0FBSyxDQUFHLE9BQUs7QUFBRyxRQUFFLENBQUcscUNBQW1DO0FBQUcsU0FBRyxDQUFHLEtBQUc7QUFBQSxJQUFDLENBQUMsS0FDNUUsQUFBQyxFQUFDLFNBQUEsQUFBQyxDQUFJO0FBQ1QsWUFBTSxJQUFJLEFBQUMsQ0FBQyxnQkFBZSxDQUFDLENBQUE7SUFDOUIsRUFBQyxDQUFDO0VBQ04sQ0FBQSxDQUFDO0FBRUQsT0FBTyxFQUNMLE1BQUssQ0FBRyxPQUFLLENBQ2YsQ0FBQTtBQUNGLENBQUEsQ0FBQztBQUVELE9BQU8sS0FBSyxJQUFJLFNBQUMsSUFBRyxDQUFNO0FBQ3hCLE9BQU8sRUFDTCxDQUFBLEFBQUMsQ0FBQyxJQUFHLENBQUcsRUFBRSxLQUFJLENBQUcsV0FBUyxDQUFFLENBQUcsa0JBQWdCLENBQUMsQ0FDaEQsQ0FBQSxDQUFBLEFBQUMsQ0FBQyxNQUFLLENBQUcsRUFDUixDQUFBLEFBQUMsQ0FBQyxPQUFNLENBQUc7QUFDVCxRQUFJLENBQUcsQ0FBQSxRQUFPLE1BQU0sUUFBUSxBQUFDLEVBQUM7QUFDOUIsV0FBTyxDQUFHLENBQUEsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxPQUFNLENBQUcsQ0FBQSxRQUFPLE1BQU0sUUFBUSxDQUFDO0FBQ3BELFFBQUksQ0FBRyxnQkFBYztBQUNyQixjQUFVLENBQUcsV0FBUztBQUFBLEVBQ3hCLENBQUMsQ0FDRCxDQUFBLENBQUEsQUFBQyxDQUFDLElBQUcsQ0FBRyxFQUFFLEtBQUksQ0FBRyxFQUFDLHNCQUFxQixDQUFDLENBQUUsQ0FBRyxNQUFJLENBQUMsQ0FDbEQsQ0FBQSxDQUFBLEFBQUMsQ0FBQyxPQUFNLENBQUc7QUFDVCxRQUFJLENBQUcsQ0FBQSxRQUFPLE1BQU0sUUFBUSxBQUFDLEVBQUM7QUFDOUIsV0FBTyxDQUFHLENBQUEsQ0FBQSxTQUFTLEFBQUMsQ0FBQyxPQUFNLENBQUcsQ0FBQSxRQUFPLE1BQU0sUUFBUSxDQUFDO0FBQ3BELFFBQUksQ0FBRyxnQkFBYztBQUNyQixjQUFVLENBQUcsV0FBUztBQUFBLEVBQ3hCLENBQUMsQ0FDRCxDQUFBLENBQUEsQUFBQyxDQUFDLEtBQUksQ0FBRyxFQUFFLEtBQUksQ0FBRyxzQkFBb0IsQ0FBRSxDQUFHLEVBQ3pDLENBQUEsQUFBQyxDQUFDLElBQUcsQ0FBRyxFQUFFLEtBQUksQ0FBRyx1QkFBcUIsQ0FBRSxDQUFJLFNBQU8sQ0FBQyxDQUNwRCxDQUFBLENBQUEsQUFBQyxDQUFDLE9BQU0sQ0FBRztBQUNULFFBQUksQ0FBRyxDQUFBLFFBQU8sTUFBTSxhQUFhLEFBQUMsRUFBQztBQUNuQyxXQUFPLENBQUcsQ0FBQSxDQUFBLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBRyxDQUFBLFFBQU8sTUFBTSxhQUFhLENBQUM7QUFDekQsUUFBSSxDQUFHLFlBQVU7QUFDakIsY0FBVSxDQUFHLFdBQVM7QUFBQSxFQUN4QixDQUFDLENBQ0QsQ0FBQSxDQUFBLEFBQUMsQ0FBQyxLQUFJLENBQUcsRUFBRSxLQUFJLENBQUcsb0JBQWtCLENBQUUsQ0FBQyxDQUN2QyxDQUFBLENBQUEsQUFBQyxDQUFDLE9BQU0sQ0FBRztBQUNULFFBQUksQ0FBRyxDQUFBLFFBQU8sTUFBTSxhQUFhLEFBQUMsRUFBQztBQUNuQyxXQUFPLENBQUcsQ0FBQSxDQUFBLFNBQVMsQUFBQyxDQUFDLE9BQU0sQ0FBRyxDQUFBLFFBQU8sTUFBTSxhQUFhLENBQUM7QUFDekQsUUFBSSxDQUFHLFlBQVU7QUFDakIsY0FBVSxDQUFHLFdBQVM7QUFBQSxFQUN4QixDQUFDLENBQ0QsQ0FBQSxDQUFBLEFBQUMsQ0FBQyxRQUFPLENBQUc7QUFBRSxRQUFJLENBQUcsd0JBQXNCO0FBQUcsVUFBTSxDQUFHLENBQUEsSUFBRyxPQUFPO0FBQUEsRUFBQyxDQUFHLFdBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3pGLENBQUE7QUFDRixDQUFBLENBQUM7QUFFRCxPQUFPLEFBQUMsQ0FBQyxRQUFPLGVBQWUsQUFBQyxDQUFDLEtBQUksQ0FBQyxDQUFHLFNBQU8sQ0FBQyxDQUFDO0FBQ2xEIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlZ2lzdGVyID0ge307XG5cbnJlZ2lzdGVyLm1vZGVsID0ge1xuICAgIHRlYW1PbmU6IG0ucHJvcCgnJyksXG4gICAgdGVhbVR3bzogbS5wcm9wKCcnKSxcbiAgICB0ZWFtT25lU2NvcmU6IG0ucHJvcCgnJyksXG4gICAgdGVhbVR3b1Njb3JlOiBtLnByb3AoJycpXG59XG5cbnJlZ2lzdGVyLmNvbnRyb2xsZXIgPSAoKSA9PiB7XG4gIHZhciB1cGRhdGUgPSAoZSkgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgZGF0YSA9IHtcbiAgICAgIHRlYW1zOiBbcmVnaXN0ZXIubW9kZWwudGVhbU9uZSgpLCByZWdpc3Rlci5tb2RlbC50ZWFtVHdvKCldLFxuICAgICAgc2NvcmU6IFtyZWdpc3Rlci5tb2RlbC50ZWFtT25lU2NvcmUoKSwgcmVnaXN0ZXIubW9kZWwudGVhbVR3b1Njb3JlKCldXG4gICAgfVxuICAgIG0ucmVxdWVzdCh7IG1ldGhvZDogJ1BPU1QnLCB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjgwMDEvYXBpL3JlZ2lzdGVyJywgZGF0YTogZGF0YX0pXG4gICAgICAudGhlbigoKSA9PntcbiAgICAgICAgY29uc29sZS5sb2coJ2dvdCBhIHJlc3BvbnNlJylcbiAgICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiB1cGRhdGVcbiAgfVxufTtcblxucmVnaXN0ZXIudmlldyA9IChjdHJsKSA9PiB7XG4gIHJldHVybiBbXG4gICAgbSgnaDEnLCB7IGNsYXNzOiAnaGVhZGluZzEnIH0sICdSZWdpc3RlciByZXN1bHQnKSxcbiAgICBtKCdmb3JtJywgW1xuICAgICAgbSgnaW5wdXQnLCB7XG4gICAgICAgIHZhbHVlOiByZWdpc3Rlci5tb2RlbC50ZWFtT25lKCksXG4gICAgICAgIG9uY2hhbmdlOiBtLndpdGhBdHRyKCd2YWx1ZScsIHJlZ2lzdGVyLm1vZGVsLnRlYW1PbmUpLFxuICAgICAgICBjbGFzczogJ2lucHV0VGVhbU5hbWUnLFxuICAgICAgICBwbGFjZWhvbGRlcjogJ1RlYW0gT25lJ1xuICAgICAgfSksXG4gICAgICBtKCdoMicsIHsgY2xhc3M6IFsnaGVhZGluZzJfX2xlc3NWU3BhY2UnXSB9LCAndnMuJyksXG4gICAgICBtKCdpbnB1dCcsIHtcbiAgICAgICAgdmFsdWU6IHJlZ2lzdGVyLm1vZGVsLnRlYW1Ud28oKSxcbiAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgcmVnaXN0ZXIubW9kZWwudGVhbVR3byksXG4gICAgICAgIGNsYXNzOiAnaW5wdXRUZWFtTmFtZScsXG4gICAgICAgIHBsYWNlaG9sZGVyOiAnVGVhbSBUd28nXG4gICAgICB9KSxcbiAgICAgIG0oJ2RpdicsIHsgY2xhc3M6ICd0ZWFtU2NvcmUtY29udGFpbmVyJyB9LCBbXG4gICAgICAgIG0oJ2gyJywgeyBjbGFzczogJ2hlYWRpbmcyX19sZXNzVlNwYWNlJyB9LCAgJ1Jlc3VsdCcpLFxuICAgICAgICBtKCdpbnB1dCcsIHtcbiAgICAgICAgICB2YWx1ZTogcmVnaXN0ZXIubW9kZWwudGVhbU9uZVNjb3JlKCksXG4gICAgICAgICAgb25jaGFuZ2U6IG0ud2l0aEF0dHIoJ3ZhbHVlJywgcmVnaXN0ZXIubW9kZWwudGVhbU9uZVNjb3JlKSxcbiAgICAgICAgICBjbGFzczogJ3RlYW1TY29yZScsXG4gICAgICAgICAgcGxhY2Vob2xkZXI6ICdUZWFtIE9uZSdcbiAgICAgICAgfSksXG4gICAgICAgIG0oJ2RpdicsIHsgY2xhc3M6ICd0ZWFtU2NvcmUtZGl2aWRlcicgfSksXG4gICAgICAgIG0oJ2lucHV0Jywge1xuICAgICAgICAgIHZhbHVlOiByZWdpc3Rlci5tb2RlbC50ZWFtVHdvU2NvcmUoKSxcbiAgICAgICAgICBvbmNoYW5nZTogbS53aXRoQXR0cigndmFsdWUnLCByZWdpc3Rlci5tb2RlbC50ZWFtVHdvU2NvcmUpLFxuICAgICAgICAgIGNsYXNzOiAndGVhbVNjb3JlJyxcbiAgICAgICAgICBwbGFjZWhvbGRlcjogJ1RlYW0gVHdvJ1xuICAgICAgICB9KSxcbiAgICAgICAgbSgnYnV0dG9uJywgeyBjbGFzczogJ3N1Ym1pdEJ1dHRvbi1yZWdpc3RlcicsIG9uY2xpY2s6IGN0cmwudXBkYXRlfSAsJ1JlZ2lzdGVyJyldKV0pXG4gIF1cbn07XG5cbm0ubW9kdWxlKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKSwgcmVnaXN0ZXIpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9